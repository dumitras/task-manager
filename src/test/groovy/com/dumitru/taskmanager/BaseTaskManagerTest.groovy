/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package com.dumitru.taskmanager

import com.dumitru.taskmanager.exception.ProcessLimitExceededException
import com.dumitru.taskmanager.process.Priority
import com.dumitru.taskmanager.process.Process
import spock.lang.Shared
import spock.lang.Specification
import spock.lang.Unroll

class BaseTaskManagerTest extends Specification {

    @Shared
    def taskManager = new BaseTaskManager()
    @Shared
    def max_capacity = taskManager.MAX_CAPACITY
    @Shared
    def processList = Arrays.asList(
            new Process(Priority.HIGH),
            new Process(Priority.LOW),
            new Process(Priority.MEDIUM),
            new Process(Priority.LOW),
            new Process(Priority.MEDIUM))

    def setup() {
        taskManager = setupProcessList(max_capacity)
    }

    @Unroll
    def 'add process throws exception when maximum capacity is reached test'() {
        given:
        def process = new Process(Priority.MEDIUM)

        when:
        taskManager.add(process)

        then:
        ProcessLimitExceededException ex = thrown()
        String.format("Maximum number of %d processes is reached.", max_capacity) == ex.message
    }

    def 'add process test'() {
        setup:
        taskManager = setupProcessList(max_capacity - 1)
        def process = new Process(Priority.MEDIUM)

        when:
        taskManager.add(process)

        then:
        max_capacity == taskManager.getProcesses().size()
        process == taskManager.getProcesses().getLast()
    }

    @Unroll
    def 'kill process test'() {
        given:
        def processToKill = taskManager.getProcesses().getLast()

        when:
        taskManager.kill(processToKill)

        then:
        !taskManager.getProcesses().contains(processToKill)
    }

    @Unroll
    def 'killGroup processes with priority=#priority test'() {
        given:
        def expectedSize = max_capacity - getNrOfProcessesToKill(taskManager.getProcesses(), priority)

        when:
        taskManager.killGroup(priority)

        then:
        expectedSize == taskManager.getProcesses().size()

        where:
        priority        | _
        Priority.LOW    | _
        Priority.MEDIUM | _
        Priority.HIGH   | _
    }

    def 'killAll processes test'() {
        when:
        taskManager.killAll()

        then:
        taskManager.getProcesses().isEmpty()
    }

    private static int getNrOfProcessesToKill(LinkedList<Process> processes, Priority priorityToKill) {
        def nrOfProcessesWithPriorityToKill = 0
        for (Process p : processes) {
            if (p.getPriority().ordinal() == priorityToKill.ordinal()) {
                nrOfProcessesWithPriorityToKill++
            }
        }
        nrOfProcessesWithPriorityToKill
    }

    private BaseTaskManager setupProcessList(int size) {
        def taskManager = new BaseTaskManager()
        def index = 0
        while (taskManager.getProcesses().size() < size) {
            taskManager.add(processList.get(index))
            index++
        }
        taskManager
    }
}
